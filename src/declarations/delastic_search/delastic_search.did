type Result = 
 variant {
   err: vec Record;
   ok: vec Record;
 };
type RecordAttributes = 
 vec record {
       text;
       AttributeValue;
     };
type Record = 
 record {
   attributes: RecordAttributes;
   entityType: text;
   id: text;
 };
type AttributeValuePrimitive = 
 variant {
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
 };
type AttributeValue = 
 variant {
   arrayBool: vec bool;
   arrayFloat: vec float64;
   arrayInt: vec int;
   arrayText: vec text;
   "blob": blob;
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
   tuple: vec AttributeValuePrimitive;
 };
service : {
  queryIndex: (text, nat, nat, text) -> (Result) query;
  removeRecord: (text, vec text) -> ();
  updateIndex: (Record, vec text) -> ();
  updateIndexWithKeys: (Record, vec text, vec text) -> ();
}
